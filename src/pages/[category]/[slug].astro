---
// Universal dynamic route for blog posts, gift guides, faqs, etc.
// Supports URLs like /blog/slug, /gift-guides/slug, /faqs/slug
import fs from 'fs';
import path from 'path';
import { MarkdownInstance } from 'astro';

export async function getStaticPaths() {
  // Dynamically generate all category/slug paths
  const contentDir = path.resolve('src/content');
  const categories = fs.readdirSync(contentDir).filter((f) => fs.statSync(path.join(contentDir, f)).isDirectory());
  let paths = [];
  for (const category of categories) {
    const files = fs.readdirSync(path.join(contentDir, category)).filter((f) => f.endsWith('.md'));
    for (const file of files) {
      const slug = file.replace(/\.md$/, '');
      paths.push({ params: { category, slug } });
    }
  }
  return paths;
}

export async function get({ params }) {
  const { category, slug } = params;
  const filePath = path.resolve('src/content', category, `${slug}.md`);
  try {
    const file = await import(`../../content/${category}/${slug}.md`);
    return { props: { post: file.default, frontmatter: file.frontmatter } };
  } catch (e) {
    return { status: 404, body: 'Not found' };
  }
}

---

{ /* Render the post if found, otherwise show 404 */ }
{frontmatter ? (
  <article>
    <h1>{frontmatter.title}</h1>
    <p>{frontmatter.description}</p>
    <MarkdownInstance content={post} />
  </article>
) : (
  <section class="py-16 text-center">
    <h1>404 â€“ Not Found</h1>
    <p>This post could not be found.</p>
  </section>
)} 